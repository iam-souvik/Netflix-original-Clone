"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = require("express");
var _lodash = _interopRequireDefault(require("lodash"));
var _middleware = require("@verdaccio/middleware");
var _tarball = require("@verdaccio/tarball");
var _utils = require("@verdaccio/utils");
var _constants = require("../../../lib/constants");
var _logger = require("../../../lib/logger");
var _utils2 = require("../../../lib/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const getOrder = (order = 'asc') => {
  return order === 'asc';
};
function addPackageWebApi(storage, auth, config) {
  const can = (0, _middleware.allow)(auth, {
    beforeAll: (params, message) => {
      _logger.logger.debug(params, message);
    },
    afterAll: (params, message) => _logger.logger.debug(params, message)
  });
  const pkgRouter = (0, _express.Router)(); /* eslint new-cap: 0 */

  const checkAllow = (name, remoteUser) => new Promise((resolve, reject) => {
    try {
      auth.allow_access({
        packageName: name
      }, remoteUser, (err, allowed) => {
        if (err) {
          resolve(false);
        }
        resolve(allowed);
      });
    } catch (err) {
      reject(err);
    }
  });

  // Get list of all visible package
  pkgRouter.get('/packages', function (req, res, next) {
    storage.getLocalDatabase(async function (err, packages) {
      if (err) {
        throw err;
      }
      async function processPackages(packages = []) {
        const permissions = [];
        const packgesCopy = packages.slice();
        for (const pkg of packgesCopy) {
          const pkgCopy = _objectSpread({}, pkg);
          pkgCopy.author = (0, _utils2.formatAuthor)(pkg.author);
          try {
            if (await checkAllow(pkg.name, req.remote_user)) {
              if (config.web) {
                pkgCopy.author.avatar = (0, _utils.generateGravatarUrl)(pkgCopy.author.email, config.web.gravatar);
              }
              if (!_lodash.default.isNil(pkgCopy.dist) && !_lodash.default.isNull(pkgCopy.dist.tarball)) {
                pkgCopy.dist.tarball = (0, _tarball.getLocalRegistryTarballUri)(pkgCopy.dist.tarball, pkg.name, {
                  protocol: req.protocol,
                  headers: req.headers,
                  host: req.hostname
                }, config.url_prefix);
              }
              permissions.push(pkgCopy);
            }
          } catch (err) {
            _logger.logger.error({
              name: pkg.name,
              error: err
            }, 'permission process for @{name} has failed: @{error}');
            throw err;
          }
        }
        return permissions;
      }
      const {
        web
      } = config;
      // @ts-ignore
      const order = config.web ? getOrder(web.sort_packages) : true;
      try {
        next((0, _utils2.sortByName)(await processPackages(packages), order));
      } catch (error) {
        next(_utils2.ErrorCode.getInternalError());
      }
    });
  });

  // Get package readme
  pkgRouter.get('/package/readme/(@:scope/)?:package/:version?', can('access'), function (req, res, next) {
    const packageName = req.params.scope ? (0, _utils2.addScope)(req.params.scope, req.params.package) : req.params.package;
    storage.getPackage({
      name: packageName,
      uplinksLook: true,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }
        res.set(_constants.HEADER_TYPE.CONTENT_TYPE, _constants.HEADERS.TEXT_PLAIN);
        next((0, _utils2.parseReadme)(info.name, info.readme));
      }
    });
  });
  pkgRouter.get('/sidebar/(@:scope/)?:package', can('access'), function (req, res, next) {
    const packageName = req.params.scope ? (0, _utils2.addScope)(req.params.scope, req.params.package) : req.params.package;
    storage.getPackage({
      name: packageName,
      uplinksLook: true,
      keepUpLinkData: true,
      req,
      callback: function (err, info) {
        if (_lodash.default.isNil(err)) {
          const {
            v
          } = req.query;
          let sideBarInfo = _lodash.default.clone(info);
          sideBarInfo.versions = (0, _tarball.convertDistRemoteToLocalTarballUrls)(info, {
            protocol: req.protocol,
            headers: req.headers,
            host: req.hostname
          }, config.url_prefix).versions;
          if ((0, _utils2.isVersionValid)(info, v)) {
            // @ts-ignore
            sideBarInfo.latest = sideBarInfo.versions[v];
            sideBarInfo.latest.author = (0, _utils2.formatAuthor)(sideBarInfo.latest.author);
          } else {
            var _sideBarInfo;
            sideBarInfo.latest = sideBarInfo.versions[info[_constants.DIST_TAGS].latest];
            if ((_sideBarInfo = sideBarInfo) !== null && _sideBarInfo !== void 0 && _sideBarInfo.latest) {
              sideBarInfo.latest.author = (0, _utils2.formatAuthor)(sideBarInfo.latest.author);
            } else {
              res.status(_constants.HTTP_STATUS.NOT_FOUND);
              res.end();
              return;
            }
          }
          sideBarInfo = (0, _utils2.deleteProperties)(['readme', '_attachments', '_rev', 'name'], sideBarInfo);
          if (config.web) {
            sideBarInfo = (0, _utils2.addGravatarSupport)(sideBarInfo, config.web.gravatar);
          } else {
            sideBarInfo = (0, _utils2.addGravatarSupport)(sideBarInfo);
          }
          next(sideBarInfo);
        } else {
          res.status(_constants.HTTP_STATUS.NOT_FOUND);
          res.end();
        }
      }
    });
  });
  return pkgRouter;
}
var _default = addPackageWebApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,