"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _cookies = _interopRequireDefault(require("cookies"));
var _express = _interopRequireDefault(require("express"));
var _lodash = _interopRequireDefault(require("lodash"));
var _config = require("@verdaccio/config");
var _middleware = require("@verdaccio/middleware");
var _utils = require("@verdaccio/utils");
var _authUtils = require("../../../lib/auth-utils");
var _constants = require("../../../lib/constants");
var _logger = require("../../../lib/logger");
var _utils2 = require("../../../lib/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _default(route, auth, config) {
  /* eslint new-cap:off */
  const userRouter = _express.default.Router();
  userRouter.get('/-/user/:org_couchdb_user', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    res.status(_constants.HTTP_STATUS.OK);
    next({
      ok: (0, _utils.getAuthenticatedMessage)(req.remote_user.name)
    });
  });
  userRouter.put('/-/user/:org_couchdb_user/:_rev?/:revision?', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    const {
      name,
      password
    } = req.body;
    const remoteName = req.remote_user.name;
    if (_lodash.default.isNil(remoteName) === false && _lodash.default.isNil(name) === false && remoteName === name) {
      auth.authenticate(name, password, async function callbackAuthenticate(err, user) {
        if (err) {
          _logger.logger.error({
            name,
            err
          }, 'authenticating for user @{username} failed. Error: @{err.message}');
          return next(_utils2.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, _constants.API_ERROR.BAD_USERNAME_PASSWORD));
        }
        const restoredRemoteUser = (0, _config.createRemoteUser)(name, user.groups || []);
        const token = await (0, _authUtils.getApiToken)(auth, config, restoredRemoteUser, password);
        res.status(_constants.HTTP_STATUS.CREATED);
        res.set(_constants.HEADERS.CACHE_CONTROL, 'no-cache, no-store');
        return next({
          ok: (0, _utils.getAuthenticatedMessage)(req.remote_user.name),
          token
        });
      });
    } else {
      if ((0, _authUtils.validatePassword)(password) === false) {
        // eslint-disable-next-line new-cap
        return next(_utils2.ErrorCode.getCode(_constants.HTTP_STATUS.BAD_REQUEST, _constants.API_ERROR.PASSWORD_SHORT));
      }
      auth.add_user(name, password, async function (err, user) {
        if (err) {
          if (err.status >= _constants.HTTP_STATUS.BAD_REQUEST && err.status < _constants.HTTP_STATUS.INTERNAL_ERROR) {
            // With npm registering is the same as logging in,
            // and npm accepts only an 409 error.
            // So, changing status code here.
            return next(_utils2.ErrorCode.getCode(err.status, err.message) || _utils2.ErrorCode.getConflict(err.message));
          }
          return next(err);
        }
        const token = name && password ? await (0, _authUtils.getApiToken)(auth, config, user, password) : undefined;
        req.remote_user = user;
        res.status(_constants.HTTP_STATUS.CREATED);
        res.set(_constants.HEADERS.CACHE_CONTROL, 'no-cache, no-store');
        return next({
          ok: `user '${req.body.name}' created`,
          token
        });
      });
    }
  });
  userRouter.delete('/-/user/token/*', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    res.status(_constants.HTTP_STATUS.OK);
    next({
      ok: _constants.API_MESSAGE.LOGGED_OUT
    });
  });

  // placeholder 'cause npm require to be authenticated to publish
  // we do not do any real authentication yet
  userRouter.post('/_session', _cookies.default.express(), function (req, res, next) {
    res.cookies.set('AuthSession', String(Math.random()), (0, _utils.createSessionToken)());
    next({
      ok: true,
      name: 'somebody',
      roles: []
    });
  });
  route.use(userRouter);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,