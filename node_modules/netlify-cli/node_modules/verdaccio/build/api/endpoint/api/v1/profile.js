"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _express = require("express");
var _lodash = _interopRequireDefault(require("lodash"));
var _middleware = require("@verdaccio/middleware");
var _authUtils = require("../../../../lib/auth-utils");
var _constants = require("../../../../lib/constants");
var _utils = require("../../../../lib/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _default(auth, config) {
  const profileRoute = (0, _express.Router)(); /* eslint new-cap: 0 */
  function buildProfile(name) {
    return {
      tfa: false,
      name,
      email: '',
      email_verified: false,
      created: '',
      updated: '',
      cidr_whitelist: null,
      fullname: ''
    };
  }
  profileRoute.get('/user', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name) === false) {
      return next(buildProfile(req.remote_user.name));
    }
    res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
    return next({
      message: _constants.API_ERROR.MUST_BE_LOGGED
    });
  });
  profileRoute.post('/user', (0, _middleware.rateLimit)(config === null || config === void 0 ? void 0 : config.userRateLimit), function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }
    const {
      password,
      tfa
    } = req.body;
    const {
      name
    } = req.remote_user;
    if (_lodash.default.isNil(password) === false) {
      if ((0, _authUtils.validatePassword)(password.new) === false) {
        /* eslint new-cap:off */
        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, _constants.API_ERROR.PASSWORD_SHORT));
        /* eslint new-cap:off */
      }

      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNull(err) === false) {
          return next(_utils.ErrorCode.getCode(err.status, err.message) || _utils.ErrorCode.getConflict(err.message));
        }
        if (isUpdated) {
          return next(buildProfile(req.remote_user.name));
        }
        return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
      });
    } else if (_lodash.default.isNil(tfa) === false) {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.SERVICE_UNAVAILABLE, _constants.SUPPORT_ERRORS.TFA_DISABLED));
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, _constants.APP_ERROR.PROFILE_ERROR));
    }
  });
  return profileRoute;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,