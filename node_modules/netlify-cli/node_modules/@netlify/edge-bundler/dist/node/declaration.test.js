import { test, expect } from 'vitest';
import { mergeDeclarations } from './declaration.js';
const deployConfigDeclarations = [];
test('Deploy config takes precedence over user config', () => {
    const deployConfigDeclarations = [
        { function: 'framework-a', path: '/path1' },
        { function: 'framework-b', path: '/path2' },
    ];
    const tomlConfig = [
        { function: 'user-a', path: '/path1' },
        { function: 'user-b', path: '/path2' },
    ];
    const userFuncConfig = {
        'user-c': { path: ['/path1', '/path2'] },
    };
    const internalFuncConfig = {
        'framework-c': { path: ['/path1', '/path2'] },
    };
    expect(mergeDeclarations(tomlConfig, userFuncConfig, internalFuncConfig, deployConfigDeclarations)).toMatchSnapshot();
});
test('In-source config takes precedence over netlify.toml config', () => {
    const tomlConfig = [
        { function: 'geolocation', path: '/geo', cache: 'off' },
        { function: 'json', path: '/json', cache: 'manual' },
    ];
    const userFuncConfig = {
        geolocation: { path: ['/geo-isc', '/*'], cache: 'manual' },
        json: { path: '/json', cache: 'off' },
    };
    const expectedDeclarations = [
        { function: 'geolocation', path: '/geo-isc', cache: 'manual' },
        { function: 'geolocation', path: '/*', cache: 'manual' },
        { function: 'json', path: '/json', cache: 'off' },
    ];
    const declarations = mergeDeclarations(tomlConfig, userFuncConfig, {}, deployConfigDeclarations);
    expect(declarations).toEqual(expectedDeclarations);
});
test("Declarations don't break if no in-source config is provided", () => {
    const tomlConfig = [
        { function: 'geolocation', path: '/geo', cache: 'off' },
        { function: 'json', path: '/json', cache: 'manual' },
    ];
    const userFuncConfig = {
        geolocation: { path: ['/geo-isc'], cache: 'manual' },
        json: {},
    };
    const expectedDeclarations = [
        { function: 'geolocation', path: '/geo-isc', cache: 'manual' },
        { function: 'json', path: '/json', cache: 'manual' },
    ];
    const declarations = mergeDeclarations(tomlConfig, userFuncConfig, {}, deployConfigDeclarations);
    expect(declarations).toEqual(expectedDeclarations);
});
test('In-source config works independent of the netlify.toml file if a path is defined and otherwise if no path is set', () => {
    const tomlConfig = [{ function: 'geolocation', path: '/geo', cache: 'off' }];
    const funcConfigWithPath = {
        json: { path: ['/json', '/json-isc'], cache: 'off' },
    };
    const funcConfigWithoutPath = {
        json: { cache: 'off' },
    };
    const expectedDeclarationsWithISCPath = [
        { function: 'geolocation', path: '/geo', cache: 'off' },
        { function: 'json', path: '/json', cache: 'off' },
        { function: 'json', path: '/json-isc', cache: 'off' },
    ];
    const expectedDeclarationsWithoutISCPath = [{ function: 'geolocation', path: '/geo', cache: 'off' }];
    const declarationsWithISCPath = mergeDeclarations(tomlConfig, funcConfigWithPath, {}, deployConfigDeclarations);
    expect(declarationsWithISCPath).toEqual(expectedDeclarationsWithISCPath);
    const declarationsWithoutISCPath = mergeDeclarations(tomlConfig, funcConfigWithoutPath, {}, deployConfigDeclarations);
    expect(declarationsWithoutISCPath).toEqual(expectedDeclarationsWithoutISCPath);
});
test('In-source config works if only the cache config property is set', () => {
    const tomlConfig = [{ function: 'geolocation', path: '/geo', cache: 'off' }];
    const funcConfig = {
        geolocation: { cache: 'manual' },
    };
    const expectedDeclarations = [{ function: 'geolocation', path: '/geo', cache: 'manual' }];
    expect(mergeDeclarations(tomlConfig, funcConfig, {}, deployConfigDeclarations)).toEqual(expectedDeclarations);
});
test("In-source config path property works if it's not an array", () => {
    const tomlConfig = [{ function: 'json', path: '/json-toml', cache: 'off' }];
    const funcConfig = {
        json: { path: '/json', cache: 'manual' },
    };
    const expectedDeclarations = [{ function: 'json', path: '/json', cache: 'manual' }];
    expect(mergeDeclarations(tomlConfig, funcConfig, {}, deployConfigDeclarations)).toEqual(expectedDeclarations);
});
test("In-source config path property works if it's not an array and it's not present in toml or deploy config", () => {
    const tomlConfig = [{ function: 'geolocation', path: '/geo', cache: 'off' }];
    const funcConfig = {
        json: { path: '/json-isc', cache: 'manual' },
    };
    const expectedDeclarations = [
        { function: 'geolocation', path: '/geo', cache: 'off' },
        { function: 'json', path: '/json-isc', cache: 'manual' },
    ];
    expect(mergeDeclarations(tomlConfig, funcConfig, {}, deployConfigDeclarations)).toEqual(expectedDeclarations);
});
test('In-source config works if path property is an empty array with cache value specified', () => {
    const tomlConfig = [{ function: 'json', path: '/json-toml', cache: 'off' }];
    const funcConfig = {
        json: { path: [], cache: 'manual' },
    };
    const expectedDeclarations = [{ function: 'json', path: '/json-toml', cache: 'manual' }];
    expect(mergeDeclarations(tomlConfig, funcConfig, {}, deployConfigDeclarations)).toEqual(expectedDeclarations);
});
test('netlify.toml-defined excludedPath are respected', () => {
    const tomlConfig = [{ function: 'geolocation', path: '/geo/*', excludedPath: '/geo/exclude' }];
    const funcConfig = {};
    const expectedDeclarations = [{ function: 'geolocation', path: '/geo/*', excludedPath: '/geo/exclude' }];
    const declarations = mergeDeclarations(tomlConfig, funcConfig, {}, deployConfigDeclarations);
    expect(declarations).toEqual(expectedDeclarations);
});
